// Generated by gencpp from file tcc_msg/EkfController.msg
// DO NOT EDIT!


#ifndef TCC_MSG_MESSAGE_EKFCONTROLLER_H
#define TCC_MSG_MESSAGE_EKFCONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tcc_msg
{
template <class ContainerAllocator>
struct EkfController_
{
  typedef EkfController_<ContainerAllocator> Type;

  EkfController_()
    : phi(0.0)
    , teta(0.0)
    , psy(0.0)
    , p(0.0)
    , q(0.0)
    , r(0.0)  {
    }
  EkfController_(const ContainerAllocator& _alloc)
    : phi(0.0)
    , teta(0.0)
    , psy(0.0)
    , p(0.0)
    , q(0.0)
    , r(0.0)  {
  (void)_alloc;
    }



   typedef double _phi_type;
  _phi_type phi;

   typedef double _teta_type;
  _teta_type teta;

   typedef double _psy_type;
  _psy_type psy;

   typedef double _p_type;
  _p_type p;

   typedef double _q_type;
  _q_type q;

   typedef double _r_type;
  _r_type r;





  typedef boost::shared_ptr< ::tcc_msg::EkfController_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tcc_msg::EkfController_<ContainerAllocator> const> ConstPtr;

}; // struct EkfController_

typedef ::tcc_msg::EkfController_<std::allocator<void> > EkfController;

typedef boost::shared_ptr< ::tcc_msg::EkfController > EkfControllerPtr;
typedef boost::shared_ptr< ::tcc_msg::EkfController const> EkfControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tcc_msg::EkfController_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tcc_msg::EkfController_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tcc_msg::EkfController_<ContainerAllocator1> & lhs, const ::tcc_msg::EkfController_<ContainerAllocator2> & rhs)
{
  return lhs.phi == rhs.phi &&
    lhs.teta == rhs.teta &&
    lhs.psy == rhs.psy &&
    lhs.p == rhs.p &&
    lhs.q == rhs.q &&
    lhs.r == rhs.r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tcc_msg::EkfController_<ContainerAllocator1> & lhs, const ::tcc_msg::EkfController_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tcc_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tcc_msg::EkfController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tcc_msg::EkfController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcc_msg::EkfController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tcc_msg::EkfController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcc_msg::EkfController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tcc_msg::EkfController_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tcc_msg::EkfController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3c6fe06aab872658fab94d8664675f5";
  }

  static const char* value(const ::tcc_msg::EkfController_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3c6fe06aab87265ULL;
  static const uint64_t static_value2 = 0x8fab94d8664675f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::tcc_msg::EkfController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tcc_msg/EkfController";
  }

  static const char* value(const ::tcc_msg::EkfController_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tcc_msg::EkfController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 phi\n"
"float64 teta\n"
"float64 psy\n"
"float64 p\n"
"float64 q\n"
"float64 r\n"
;
  }

  static const char* value(const ::tcc_msg::EkfController_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tcc_msg::EkfController_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.phi);
      stream.next(m.teta);
      stream.next(m.psy);
      stream.next(m.p);
      stream.next(m.q);
      stream.next(m.r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EkfController_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tcc_msg::EkfController_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tcc_msg::EkfController_<ContainerAllocator>& v)
  {
    s << indent << "phi: ";
    Printer<double>::stream(s, indent + "  ", v.phi);
    s << indent << "teta: ";
    Printer<double>::stream(s, indent + "  ", v.teta);
    s << indent << "psy: ";
    Printer<double>::stream(s, indent + "  ", v.psy);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "q: ";
    Printer<double>::stream(s, indent + "  ", v.q);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TCC_MSG_MESSAGE_EKFCONTROLLER_H
