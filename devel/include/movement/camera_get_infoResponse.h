// Generated by gencpp from file movement/camera_get_infoResponse.msg
// DO NOT EDIT!


#ifndef MOVEMENT_MESSAGE_CAMERA_GET_INFORESPONSE_H
#define MOVEMENT_MESSAGE_CAMERA_GET_INFORESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movement
{
template <class ContainerAllocator>
struct camera_get_infoResponse_
{
  typedef camera_get_infoResponse_<ContainerAllocator> Type;

  camera_get_infoResponse_()
    : width(0)
    , height(0)
    , Fov(0.0)
    , nearRange(0.0)  {
    }
  camera_get_infoResponse_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , Fov(0.0)
    , nearRange(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef double _Fov_type;
  _Fov_type Fov;

   typedef double _nearRange_type;
  _nearRange_type nearRange;





  typedef boost::shared_ptr< ::movement::camera_get_infoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movement::camera_get_infoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct camera_get_infoResponse_

typedef ::movement::camera_get_infoResponse_<std::allocator<void> > camera_get_infoResponse;

typedef boost::shared_ptr< ::movement::camera_get_infoResponse > camera_get_infoResponsePtr;
typedef boost::shared_ptr< ::movement::camera_get_infoResponse const> camera_get_infoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movement::camera_get_infoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movement::camera_get_infoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movement::camera_get_infoResponse_<ContainerAllocator1> & lhs, const ::movement::camera_get_infoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.Fov == rhs.Fov &&
    lhs.nearRange == rhs.nearRange;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movement::camera_get_infoResponse_<ContainerAllocator1> & lhs, const ::movement::camera_get_infoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movement

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movement::camera_get_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movement::camera_get_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::camera_get_infoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movement::camera_get_infoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::camera_get_infoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movement::camera_get_infoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movement::camera_get_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6d9c6a6d765e066fb12d59d0c7dee0f";
  }

  static const char* value(const ::movement::camera_get_infoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6d9c6a6d765e066ULL;
  static const uint64_t static_value2 = 0xfb12d59d0c7dee0fULL;
};

template<class ContainerAllocator>
struct DataType< ::movement::camera_get_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movement/camera_get_infoResponse";
  }

  static const char* value(const ::movement::camera_get_infoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movement::camera_get_infoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 width\n"
"uint32 height\n"
"float64 Fov\n"
"float64 nearRange\n"
"\n"
;
  }

  static const char* value(const ::movement::camera_get_infoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movement::camera_get_infoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.Fov);
      stream.next(m.nearRange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_get_infoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movement::camera_get_infoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movement::camera_get_infoResponse_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "Fov: ";
    Printer<double>::stream(s, indent + "  ", v.Fov);
    s << indent << "nearRange: ";
    Printer<double>::stream(s, indent + "  ", v.nearRange);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEMENT_MESSAGE_CAMERA_GET_INFORESPONSE_H
