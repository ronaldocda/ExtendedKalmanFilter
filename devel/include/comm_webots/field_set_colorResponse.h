// Generated by gencpp from file comm_webots/field_set_colorResponse.msg
// DO NOT EDIT!


#ifndef COMM_WEBOTS_MESSAGE_FIELD_SET_COLORRESPONSE_H
#define COMM_WEBOTS_MESSAGE_FIELD_SET_COLORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comm_webots
{
template <class ContainerAllocator>
struct field_set_colorResponse_
{
  typedef field_set_colorResponse_<ContainerAllocator> Type;

  field_set_colorResponse_()
    : success(0)  {
    }
  field_set_colorResponse_(const ContainerAllocator& _alloc)
    : success(0)  {
  (void)_alloc;
    }



   typedef int32_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::comm_webots::field_set_colorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm_webots::field_set_colorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct field_set_colorResponse_

typedef ::comm_webots::field_set_colorResponse_<std::allocator<void> > field_set_colorResponse;

typedef boost::shared_ptr< ::comm_webots::field_set_colorResponse > field_set_colorResponsePtr;
typedef boost::shared_ptr< ::comm_webots::field_set_colorResponse const> field_set_colorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm_webots::field_set_colorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm_webots::field_set_colorResponse_<ContainerAllocator1> & lhs, const ::comm_webots::field_set_colorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm_webots::field_set_colorResponse_<ContainerAllocator1> & lhs, const ::comm_webots::field_set_colorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm_webots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_webots::field_set_colorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::field_set_colorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::field_set_colorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c2bcf2ff0894cb3058b1bf4c8c4175a";
  }

  static const char* value(const ::comm_webots::field_set_colorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c2bcf2ff0894cb3ULL;
  static const uint64_t static_value2 = 0x058b1bf4c8c4175aULL;
};

template<class ContainerAllocator>
struct DataType< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_webots/field_set_colorResponse";
  }

  static const char* value(const ::comm_webots::field_set_colorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 success\n"
"\n"
;
  }

  static const char* value(const ::comm_webots::field_set_colorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct field_set_colorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm_webots::field_set_colorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm_webots::field_set_colorResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<int32_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_WEBOTS_MESSAGE_FIELD_SET_COLORRESPONSE_H
