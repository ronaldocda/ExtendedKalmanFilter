// Generated by gencpp from file comm_webots/field_enable_sf_trackingRequest.msg
// DO NOT EDIT!


#ifndef COMM_WEBOTS_MESSAGE_FIELD_ENABLE_SF_TRACKINGREQUEST_H
#define COMM_WEBOTS_MESSAGE_FIELD_ENABLE_SF_TRACKINGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comm_webots
{
template <class ContainerAllocator>
struct field_enable_sf_trackingRequest_
{
  typedef field_enable_sf_trackingRequest_<ContainerAllocator> Type;

  field_enable_sf_trackingRequest_()
    : field(0)
    , sampling_period(0)  {
    }
  field_enable_sf_trackingRequest_(const ContainerAllocator& _alloc)
    : field(0)
    , sampling_period(0)  {
  (void)_alloc;
    }



   typedef uint64_t _field_type;
  _field_type field;

   typedef uint64_t _sampling_period_type;
  _sampling_period_type sampling_period;





  typedef boost::shared_ptr< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct field_enable_sf_trackingRequest_

typedef ::comm_webots::field_enable_sf_trackingRequest_<std::allocator<void> > field_enable_sf_trackingRequest;

typedef boost::shared_ptr< ::comm_webots::field_enable_sf_trackingRequest > field_enable_sf_trackingRequestPtr;
typedef boost::shared_ptr< ::comm_webots::field_enable_sf_trackingRequest const> field_enable_sf_trackingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator1> & lhs, const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.field == rhs.field &&
    lhs.sampling_period == rhs.sampling_period;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator1> & lhs, const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm_webots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "644e14b553e1557adc26794cf580d80c";
  }

  static const char* value(const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x644e14b553e1557aULL;
  static const uint64_t static_value2 = 0xdc26794cf580d80cULL;
};

template<class ContainerAllocator>
struct DataType< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_webots/field_enable_sf_trackingRequest";
  }

  static const char* value(const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 field\n"
"uint64 sampling_period\n"
;
  }

  static const char* value(const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.field);
      stream.next(m.sampling_period);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct field_enable_sf_trackingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm_webots::field_enable_sf_trackingRequest_<ContainerAllocator>& v)
  {
    s << indent << "field: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.field);
    s << indent << "sampling_period: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sampling_period);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_WEBOTS_MESSAGE_FIELD_ENABLE_SF_TRACKINGREQUEST_H
