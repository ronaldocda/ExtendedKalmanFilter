// Generated by gencpp from file comm_webots/node_get_orientationResponse.msg
// DO NOT EDIT!


#ifndef COMM_WEBOTS_MESSAGE_NODE_GET_ORIENTATIONRESPONSE_H
#define COMM_WEBOTS_MESSAGE_NODE_GET_ORIENTATIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace comm_webots
{
template <class ContainerAllocator>
struct node_get_orientationResponse_
{
  typedef node_get_orientationResponse_<ContainerAllocator> Type;

  node_get_orientationResponse_()
    : orientation()  {
    }
  node_get_orientationResponse_(const ContainerAllocator& _alloc)
    : orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct node_get_orientationResponse_

typedef ::comm_webots::node_get_orientationResponse_<std::allocator<void> > node_get_orientationResponse;

typedef boost::shared_ptr< ::comm_webots::node_get_orientationResponse > node_get_orientationResponsePtr;
typedef boost::shared_ptr< ::comm_webots::node_get_orientationResponse const> node_get_orientationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comm_webots::node_get_orientationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comm_webots::node_get_orientationResponse_<ContainerAllocator1> & lhs, const ::comm_webots::node_get_orientationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comm_webots::node_get_orientationResponse_<ContainerAllocator1> & lhs, const ::comm_webots::node_get_orientationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comm_webots

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ed1de3b69473461225107f55ad59b9d";
  }

  static const char* value(const ::comm_webots::node_get_orientationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ed1de3b69473461ULL;
  static const uint64_t static_value2 = 0x225107f55ad59b9dULL;
};

template<class ContainerAllocator>
struct DataType< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comm_webots/node_get_orientationResponse";
  }

  static const char* value(const ::comm_webots::node_get_orientationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion orientation\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::comm_webots::node_get_orientationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_get_orientationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comm_webots::node_get_orientationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comm_webots::node_get_orientationResponse_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMM_WEBOTS_MESSAGE_NODE_GET_ORIENTATIONRESPONSE_H
